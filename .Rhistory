theme(plot.title = element_text(hjust = 0.5))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
# Load data into R, the data is already in R format
load("~/Desktop/EMORY2019Fall/econ220/Econ220DataF2019_ano.Rdata")
# Let's give it another name so it is easier to work with it.
Prodata<-Econ220DataF2019_ano
Prodata<-Prodata %>%
filter(!is.na(q8))
Prodata<-Prodata %>%
filter(!is.na(q169))
Prodata<-Prodata %>%
filter(!is.na(q230))
Prodata<-Prodata %>%
filter(!is.na(q10))
# store the value of each question to a shorter variable
gpa <- Prodata$q8
happiness <- Prodata$q10
# select all the people who has participate in sport teams and call them athletes
Prodata$athletes <- ifelse(Prodata$q169 == "Yes" | Prodata$q230 == "y", TRUE, FALSE)
athletes <- Prodata %>%
filter(q169 =="Yes" | q230 =="y")
athletes_happiness <- athletes$q10
athletes_gpa <- athletes$q8
# select all the people who never participate in any sport teams
nonathletes <- Prodata %>%
filter(q169=="No" & q230 =="n")
nonathletes_happiness <- nonathletes$q10
nonathletes_gpa <- nonathletes$q8
mean(athletes_happiness) - mean(nonathletes_happiness) # From the result of comparing the happiness level of each group, we can see that the overall happiness of athletes are higher than those of non-athletes by almost 1 degree!
ggplot(data=Prodata, mapping=aes(x=gpa, y=happiness, color=athletes))+
geom_point(alpha=0.5)+
geom_smooth(method='lm')
ggplot(data=athletes, mapping=aes(x=athletes_gpa, y=athletes_happiness)) +
geom_point()+geom_smooth(method='lm')
ggplot(data=nonathletes, mapping=aes(x=nonathletes_gpa, y=nonathletes_happiness)) +
geom_point()+geom_smooth(method='lm') # I will merge the two graphs together in the final project to compare the graphs visually
athletesFGR = read.csv("studentAthletesFGR.csv",
stringsAsFactor = FALSE)
data.frame(head(athletesFGR))
nonAthletesFGR = read.csv("overallFGR.csv",
stringsAsFactor = FALSE)
data.frame(head(nonAthletesFGR))
ggplot(data=Data, mapping=aes(x=year, y=CPILFESL)) +
geom_point()+geom_smooth(method='lm')
Data <- read_excel("MyDataPart2.xls",
range = "A11:B752", col_types = c("date", "numeric"))
Data <- Data %>%
separate(observation_date, sep="-", into = c("year", "month", "day"))
data.frame(Data)
Data<- Data %>% group_by(year) %>% summarize(year_average=mean(CPILFESL))
ggplot(data=Data, mapping=aes(x=year, y=CPILFESL)) +
geom_point()+geom_smooth(method='lm')
Data <- read_excel("MyDataPart2.xls",
range = "A11:B752", col_types = c("date", "numeric"))
Data <- Data %>%
separate(observation_date, sep="-", into = c("year", "month", "day"))
data.frame(Data)
Data<- Data %>% group_by(year) %>% summarize(year_average=mean(CPILFESL))
ggplot(data=Data, mapping=aes(x=year, y=CPILFESL)) +
geom_point()+geom_smooth(method='lm')
data.frame(Data)
data.frame(Data)
Data <- read_excel("MyDataPart2.xls",
range = "A11:B752", col_types = c("date", "numeric"))
Data <- Data %>%
separate(observation_date, sep="-", into = c("year", "month", "day"))
Data<- Data %>% group_by(year) %>% summarize(year_average=mean(CPILFESL))
data.frame(Data)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(tidyverse)
library(knitr)
library(kableExtra)
library(lubridate)
data.frame(Data)
Data <- read_excel("MyDataPart2.xls",
range = "A11:B752", col_types = c("date", "numeric"))
Data <- Data %>%
separate(observation_date, sep="-", into = c("year", "month", "day"))
data.frame(Data)
Data %>% group_by(year) %>% summarize(year_average=mean(CPILFESL))
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(tidyverse)
library(knitr)
library(kableExtra)
library(lubridate)
library(ggplot2)
Data <- read_excel("MyDataPart2.xls",
range = "A11:B752", col_types = c("date", "numeric"))
Data <- Data %>%
separate(observation_date, sep="-", into = c("year", "month", "day"))
Data<- Data %>% group_by(year) %>% summarize(year_average=mean(CPILFESL))
data.frame(Data)
ggplot(data=Data, mapping=aes(x=year, y=CPILFESL)) +
geom_point()+geom_smooth(method='lm')
Data <- read_excel("MyDataPart2.xls",
range = "A11:B752", col_types = c("date", "numeric"))
Data <- Data %>%
separate(observation_date, sep="-", into = c("year", "month", "day"))
Data<- Data %>% group_by(year) %>% summarize(year_average=mean(CPILFESL))
data.frame(Data)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(tidyverse)
library(knitr)
library(kableExtra)
library(lubridate)
Data <- read_excel("MyDataPart2.xls",
range = "A11:B752", col_types = c("date", "numeric"))
Data <- Data %>%
separate(observation_date, sep="-", into = c("year", "month", "day"))
data.frame(Data)
Data<- Data %>% group_by(year) %>% summarize(year_average=mean(CPILFESL))
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(tidyverse)
library(knitr)
library(kableExtra)
library(lubridate)
library(ggplot2)
Data <- read_excel("MyDataPart2.xls",
range = "A11:B752", col_types = c("date", "numeric"))
Data <- Data %>%
separate(observation_date, sep="-", into = c("year", "month", "day"))
Data<- Data %>% group_by(year) %>% summarize(year_average=mean(CPILFESL))
data.frame(Data)
Data <- read_excel("MyDataPart2.xls",
range = "A11:B752", col_types = c("date", "numeric"))
Data <- Data %>%
separate(observation_date, sep="-", into = c("year", "month", "day"))
Data %>% group_by(year) %>% summarize(year_average=mean(CPILFESL))
data.frame(Data)
Data <- read_excel("MyDataPart2.xls",
range = "A11:B752", col_types = c("date", "numeric"))
Data <- Data %>%
separate(observation_date, sep="-", into = c("year", "month", "day"))
Data %>% group_by(year) %>% summarize(year_average=mean(CPILFESL))
data.frame(Data)
ggplot(data=Data, mapping=aes(x=year, y=CPILFESL)) +
geom_point()+geom_smooth(method='lm')
static<-ggplot(data=Data, aes(x=year, y=CPILFESL)) +
geom_line(color="red")
library(gganimate)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(tidyverse)
library(knitr)
library(kableExtra)
library(lubridate)
library(ggplot2)
library(gganimate)
library(gganimate)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(tidyverse)
library(knitr)
library(kableExtra)
library(lubridate)
library(ggplot2)
# library(gganimate) this will runinto error on my computer...
Data <- read_excel("MyDataPart2.xls",
range = "A11:B752", col_types = c("date", "numeric"))
Data <- Data %>%
separate(observation_date, sep="-", into = c("year", "month", "day"))
Data %>% group_by(year) %>% summarize(year_average=mean(CPILFESL))
data.frame(Data)
ggplot(data=Data, mapping=aes(x=year, y=CPILFESL)) +
geom_point()+geom_smooth(method='lm')
ggplot(data=Data, mapping=aes(x=year, y=CPILFESL)) +
geom_point()+geom_smooth(method='lm')+scale_x_continuous(breaks=seq(1957, 2018, 10))
ggplot(data=Data, mapping=aes(x=year, y=CPILFESL)) +
geom_point()+geom_smooth(method='lm')+scale_x_continuous(breaks=seq(1900, 2000, 10))
ggplot(data=Data, mapping=aes(x=year, y=CPILFESL)) +
geom_point()+geom_smooth(method='lm')+scale_x_discrete(breaks=seq(1957, 2018, 10))
ggplot(data=Data, mapping=aes(x=year, y=CPILFESL), title="hi") +
geom_point()+geom_smooth(method='lm')+scale_x_discrete(breaks=seq(1957, 2018, 10))
ggplot(data=Data, mapping=aes(x=year, y=CPILFESL)) +
geom_point()+geom_smooth(method='lm')+scale_x_discrete(breaks=seq(1957, 2018, 10))+labs(title="Unemployment")
ggplot(data=Data, mapping=aes(x=year, y=CPILFESL)) +
geom_point()+geom_smooth(method='lm')+scale_x_discrete(breaks=seq(1957, 2018, 10))+labs(title="Annual Consumer Price Index for All Urban Consumers")
---
title: "Lab 06"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
```
##  dplyr package: data manipulation
*split-apply-combine*: A common analytical pattern is to split data frame into pieces, apply some function to each pieces, and combine the results back together again to a new data frame.
It provides simple *verbs*, functions that correspond to the most common data manipulation tasks, to help you translate your thoughts into code.
*dplyr* aims to provide a function for each basic verb of data manipulation:
group_by() to split the data frame into pieces based on some variables.
filter() to select cases based on their values.
arrange() to give cases/observations a specific order
select() to select variables based on their names.
mutate() to add new variables that are functions of existing variables.
summarise() to condense multiple values to a single value.
All verbs work similarly:
1. The first argument is a data frame;
2. The subsequent arguments describe what to do with the data frame, using the variable names (without quotes);
3. The result is a new data frame;
### Import dataset
```{r}
gss<-read.csv("newgss.csv")
```
### filter()
filter() to select cases/observations/rows based on their values.
```{r}
# Select all the respondents in 2000
filter(gss, year==2000)
filter(gss, year==2000, sex=="FEMALE")
data1<-filter(gss, year==2000, sex=="FEMALE")
```
dplyr executes the filtering operator and return a new data frame, you can save the new data frame to an object.
### arrange()
Reorder the observations by their values of a variable
```{r}
# arrange(dataset, variable)
arrange(gss, age) # ascending order is default
arrange(gss, desc(age))
```
*filter() and arrange() work on **observations/rows** *
### select()
select() to select variables based on their names.
```{r}
select(gss, year, age, income1, happy, degree, marital, health)
data2<-select(gss, year, age, income1, happy, degree, marital, health)
```
### mutate()
create new columns that are functions of existing columns and add them to the original dataset as a new dataset.
```{r}
mutate(data2, income2 = income1 / age)
```
*select() and mutate() work on **varaibles/columns** *
###  Grouped summaries with summarise()
summarise() to get summaries from multiple values.
```{r}
summarise(gss, avg=mean(age, na.rm = T))
```
### Pipe operator: *%>%* (*then*)
Pipes take the output from one function and feed it to the first argument of the next function.
Instead of nesting functions (reading from the inside to the outside), the idea of of piping is to read the functions from left to right.
```{r}
gss %>%
select(year, income1, age, sex) %>%
filter(year==2000, sex=="MALE") %>%
arrange(age) %>%
mutate(income2= income1 / age)
```
### Pair summarise with group_by().
group_by() to split the data frame into pieces based on some variables.
*split-apply-combine*: split data frame into groups, apply some function to each group, and combine the results back together again to a new data frame.
```{r}
gss %>%
group_by(year) %>%
summarise(avg=mean(age, na.rm=T))
```
Exercise 1: Get a scatterplot of average income at each year!
```{r}
```
For the *gss* data, get a new dataset *ex1* of the percent of married respondents and average age of respondents by year. Get a plot to visualize the relation between age and marital status by year.
```{r}
gss %>%
group_by(year) %>%
summarise( percent = sum(marital=="MARRIED",na.rm = T)/length(marital)*100,
average=mean(age, na.rm=T))
ggplot(ex1, aes(x=year, y=percent)) +
geom_point(aes(size=average))
```
For the *gss* data, find the percent of respondents with \$25,000 or more by party affiliation and year.
```{r}
levels(gss$income)
gss %>%
group_by(year, partyid) %>%
summarise(percent = sum(income=="$25000 OR MORE",na.rm = T)/length(income)*100) %>%
arrange(year, desc(percent))
```
What is the "richest" region? - does it change over the years?
```{r}
levels(gss$region)
gss %>%
group_by(year, region) %>%
summarise(average = mean(income1, na.rm=T)) %>%
summarise( richest= region[which.max(average)], poorest=region[which.min(average)])
```
library(ggplot2)
library(dplyr)
gss<-read.csv("newgss.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
ProdataSample <- ProdataSample %>%
filter(!is.na(year))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
# Load data into R, the data is already in R format
load("~/Desktop/EMORY2019Fall/econ220/Econ220DataF2019_ano.Rdata")
# Let's give it another name so it is easier to work with it and select the variables that we will use
ProdataSample<-Econ220DataF2019_ano
# rescale the numbers that are in text to a range 0-4
ProdataSample$q17[ProdataSample$q17=="3.89/4.35"]<-3.57
ProdataSample$q17[ProdataSample$q17=="3.9/4"]<-3.9
ProdataSample$q17[ProdataSample$q17=="36/45 (International Baccalaureate)"]<-3.2
ProdataSample$q17[ProdataSample$q17=="4.29/4.5"]<-3.81
ProdataSample$q17[ProdataSample$q17=="4.3/4.5"]<-3.82
ProdataSample$q17[ProdataSample$q17=="5.6/6.0"]<-3.73
ProdataSample$q17[ProdataSample$q17=="8.5 out of 10"]<-3.4
ProdataSample$q17[ProdataSample$q17=="95"]<-3.8
ProdataSample$q17[ProdataSample$q17=="N/A"]<-NA
# There are some numerical values that outside the range I asummed that the ones below 4.5 are in the 0-4.5 range.
#Only one value is 5 thisone get converted to 4
ProdataSample$q17[ProdataSample$q17=="5"]<-4
# Clean up q22 to understandable data
ProdataSample$q22[ProdataSample$q22=="1&2"]<-2
ProdataSample$q22[ProdataSample$q22=="2 times"]<-2
ProdataSample$q22[ProdataSample$q22=="5-Apr"]<-5
#make the variable numeric
ProdataSample$q17<-as.numeric(ProdataSample$q17)
ProdataSample$q22<-as.numeric(ProdataSample$q22)
# use the function mutate and ifelse to change the values to waht you need
# Example mutate(var1=ifelse(test_expression, x, y))
# Here, test_expression must be a logical vector (or an object that can be coerced to logical). The return value is a vector with the same length as test_expression.
ProdataSample<-ProdataSample %>% mutate(q17=ifelse(q17<=4,q17,q17*4/4.5))
# Change the levels of the year variable so it has the right order.
ProdataSample$year <- ordered(ProdataSample$year,levels=c("Freshmen","Sophomore","Junior","Senior"))
summary(select(ProdataSample, "year", "q8", "q17", "q22"))
# make the sex variable a factor
ProdataSample$sex<- factor(ProdataSample$sex, level=c("Female", "Male"))
# ProdataSample %>%select("sex","q22")%>% group_by(sex)
# Checking if men's mean in q22 has edge cases but couldn't found. Men's mean is not accurate for some reason...
# Calculate the means and max
ProdataSample%>%select("sex", "year", "q8", "q17", "q22") %>% na.omit() %>% group_by(sex) %>% summarise("q8_mean"= round(mean(q8),2),"q17_mean"= round(mean(q17),2),"q22_mean"= round(mean(q22),2),"q8_max"=max(q8), "q17_max"=max(q17), "q22_max"=max(q22))
#use the knirt option warning to eliminate messages.
ProdataSample%>%select("sex", "q8", "q17") %>% na.omit() %>% group_by(sex) %>% summarise("Cor_HSGPA_GPA" = round(cor(q8,q17),3))
# dont know how to show third row NAs
ProdataSample <- ProdataSample %>%
filter(!is.na(q8))
ggplot(data=ProdataSample, mapping=aes(x=q22, y=q8, color=sex))+ geom_point(alpha=0.5)+facet_wrap(~sex)
ProdataSample <- ProdataSample %>%
filter(!is.na(year))
ggplot(data=ProdataSample, mapping=aes(x=q8, y=q22, color=year))+ geom_point(alpha=0.5)+facet_wrap(~year)+ylab("Weekly Workouts") + xlab("GPA")+ coord_flip()+facet_grid(year~.)
ProdataSample %>%
filter(!is.na(q22)) %>% # need to remove the one na but can't change the actual dataset because later still need it
group_by(sex) %>%
summarize(Times_of_weekly_excercise=round(mean(q22),3)) %>%
ggplot(mapping=aes(x=sex, y=Times_of_weekly_excercise,label=Times_of_weekly_excercise,))+
geom_col(fill="green")+
geom_text(size=8, fontface=2, color="red", position = position_stack(vjust = 0.5))+
ylab("Times of weekly excercise") + xlab("Gender")+
ggtitle("Average weekly workouts by Gender") +
theme(plot.title = element_text(hjust = 0.5))
# Male numbers somehow wrong
ProdataSample %>%
group_by(sex, race) %>%
summarize(gpa=round(mean(q8),3)) %>%
ggplot(mapping=aes(x=race, y=gpa,label=gpa, fill=sex))+ geom_col()+
geom_text(size=8, fontface=2, color="yellow", position = position_stack(vjust = 0.5))+
ylab("Current GPA") + xlab("Race")+
ggtitle("Average GPA by Race and Gender") +scale_x_discrete(labels=c("Asian", "Black", "Other", "White")) +
theme(plot.title = element_text(hjust = 0.5))
ProdataSample <- ProdataSample %>%
filter(!is.na(year))
ggplot(data=ProdataSample, mapping=aes(x=q8, y=q22, color=year))+ geom_point(alpha=0.5)+ylab("Weekly Workouts") + xlab("GPA")+ coord_flip()+facet_grid(year~.)
ProdataSample <- ProdataSample %>%
filter(!is.na(year))
ggplot(data=ProdataSample, mapping=aes(x=q8, y=q22, color=year))+ geom_point(alpha=0.5)+facet_wrap(~year)+ylab("Weekly Workouts") + xlab("GPA")+ coord_flip()
ProdataSample <- ProdataSample %>%
filter(!is.na(year))
ggplot(data=ProdataSample, mapping=aes(x=q8, y=q22, color=year))+ geom_point(alpha=0.5)+facet_wrap(~year)+ylab("Weekly Workouts") + xlab("GPA")+ coord_flip()+facet_grid(year~.)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(tidyverse)
library(knitr)
library(kableExtra)
library(lubridate)
library(ggplot2)
library(gganimate) #this will runinto error on my computer...
install.packages("png")
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(tidyverse)
library(knitr)
library(kableExtra)
library(lubridate)
library(ggplot2)
library(gganimate) #this will runinto error on my computer...
# call data set
# change ito adequate format
UN<-read.csv("UN_ExampleTidy.csv")
UN1<-rename(UN, "Population"="Value", "Country"="Country.or.Area")
UN1<-select(UN1,Country,Population,Subgroup)
UN1<-head(spread(UN1,key="Subgroup", value="Population"),10)
UN1<-rename(UN1,"Female>15"="Female 15+ yr", "Total>15"="Total 15+ yr")
UN1<-subset(UN1,select=c(1,3,2))
UN1<-kable(UN1,"html")%>%
kable_styling(full_width=FALSE, c("stripped","bordered", "hold_position"))%>%
add_header_above(c(" "=1, "Population"=2))
UN1
library(readxl)
library(gifski)
library(forecast)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(tidyverse)
library(knitr)
library(kableExtra)
library(lubridate)
library(ggplot2)
library(gganimate) #this will runinto error on my computer...
# call data set
# change ito adequate format
UN<-read.csv("UN_ExampleTidy.csv")
UN1<-rename(UN, "Population"="Value", "Country"="Country.or.Area")
UN1<-select(UN1,Country,Population,Subgroup)
UN1<-head(spread(UN1,key="Subgroup", value="Population"),10)
UN1<-rename(UN1,"Female>15"="Female 15+ yr", "Total>15"="Total 15+ yr")
UN1<-subset(UN1,select=c(1,3,2))
UN1<-kable(UN1,"html")%>%
kable_styling(full_width=FALSE, c("stripped","bordered", "hold_position"))%>%
add_header_above(c(" "=1, "Population"=2))
UN1
library(readxl)
library(gifski)
Data <- read_excel("MyDataPart2.xls",
range = "A11:B752", col_types = c("date", "numeric"))
Data <- Data %>%
separate(observation_date, sep="-", into = c("year", "month", "day"))
Data<-Data %>% group_by(year) %>% summarize(year_average=mean(CPILFESL))
ggplot(data=Data, mapping=aes(x=year, y=year_average)) +
geom_point()+geom_smooth(method='lm')+scale_x_discrete(breaks=seq(1957, 2018, 10))+labs(title="Annual Consumer Price Index for All Urban Consumers")
# Code for animation but don't know if it's right because gganimate won't work on my computer
Data$year<-as.numeric(Data$year)
static<-ggplot(Data, aes(x=year, y=year_average)) +
geom_line(color="red")
static +
transition_reveal(year) #reveal by date
# make y-axis to months and draw each months animation by years
Data2 <- read_excel("MyDataPart2.xls",
range = "A11:B752", col_types = c("date", "numeric"))
Data2 <- Data2 %>%
separate(observation_date, sep="-", into = c("year", "month", "day"))
Data2<-Data2 %>% group_by(year)
Data2$year<-as.numeric(Data2$year)
Data2$month<-as.numeric(Data2$month)
monthly<-ggplot(data=Data2, mapping=aes(x=year, y=CPILFESL))+ geom_point(alpha=0.5)+facet_wrap(~month)+ylab("Monthly CPILFESL")+geom_line(color="blue")
monthly +
transition_reveal(year) #reveal by date
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
athletesFGR = read.csv("simple",
stringsAsFactor = FALSE)
athletesFGR = read.csv("simple.csv",
stringsAsFactor = FALSE)
data.frame(head(athletesFGR))
nonAthletesFGR = read.csv("detailed.csv",
stringsAsFactor = FALSE)
data.frame(head(nonAthletesFGR))
simpleGSR = read.csv("simple.csv",
stringsAsFactor = FALSE)
data.frame(head(simpleGSR))
detailGSR = read.csv("detailed.csv",
stringsAsFactor = FALSE)
data.frame(head(detailGSR))
nonAthletes = read.csv("nonAthletes.csv",
stringsAsFactor = FALSE)
data.frame(head(nonAthletes))
nonathletes.mean(Grad.rate)
?mean
mean(nonAthelets$Grad.rate)
mean(nonAthletes$Grad.rate)
data.frame(head(nonAthletes$Grad.rate))
data.frame(head(nonAthletes))
nonAthletes = read.csv("nonAthletes.csv",
stringsAsFactor = FALSE)
data.frame(head(nonAthletes))
nonAthletes = read.csv("nonAthletes.csv",
stringsAsFactor = FALSE)
data.frame(head(nonAthletes))
nonAthletes = read.csv("nonAthletes.csv",
stringsAsFactor = FALSE)
data.frame(head(nonAthletes))
mean(nonAthletes$gradrate)
nonAthletes = read.csv("MERGED2016_17_PP.csv",
stringsAsFactor = FALSE)
data.frame(head(nonAthletes))
view.nonAthletes
nonAthletes = read.csv("overall.csv",
stringsAsFactor = FALSE)
nonAthletes = read.csv("overall.csv",
stringsAsFactor = FALSE)
nonAthletes = read.csv("overall.csv",
stringsAsFactor = FALSE)
data.frame(head(nonAthletes))
overallGSR = read.csv("overall.csv",
stringsAsFactor = FALSE)
data.frame(head(nonAthletes))
overallGSR = read.csv("overall.csv",
stringsAsFactor = FALSE)
data.frame(head(nonAthletes))
overallGSR = read.csv("overall.csv",
stringsAsFactor = FALSE)
data.frame(head(overallGSR))
overallGSR = read.csv("overall.csv",
stringsAsFactor = FALSE)
data.frame(head(overallGSR))
